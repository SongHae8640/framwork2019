-환경 설정
	pom.xml에서 
	<warSourceDirectory>webapp</warSourceDirectory> 
	이게 없으면 webapp가 src 안에 있어야 함

	<failOnMissingWebXml>false</failOnMissingWebXml>
	이 없는데 web.xml이 없으면 진행이 안됨 

	<artifactId>maven-war-plugin</artifactId>
	이 플로그 인으로 작동해줌

	maven war의 버전과 이클립스를 맞추기 위해  버전을 2.x로 

	<source>1.8</source> - jdk의 문법 적인 부분을 컴파일 하기 위해
 	<target>1.8</target> - 실행하는 타겟의 버전 
	일반적으로 이 둘을 같은 버전으로 해줌 

-구분
	//bit framework
	com.bit.framework
		url에 따라 다른 기능 = controller, view

	//user
	com.bit.controller

-jsp직접 접근 막기
	WEB-INF 안에 view 폴더를 만들고 그 안에 넣기
	controller 를 통해서 접근

-struts와의 비교
	action을 상속 받은면 execute를 재정의하여 사용 하였음


-
	url 정보와 class 정보를 통해


-frontController 패턴
	모든 요청을 dispatcher가 받고 handler mapping을 주입받아서 controller가 결정
	dispatcher가 view resolver를 이용해서 view에 접근 
	참고 : http://egloos.zum.com/brogram/v/762231	

-command 패턴
	interface를 상속 받아 사용하는 

-어떤 properties를 넣주냐에 따라 다른 기능 
	모듈 조합

-Dao 메서드 중복
	insert deletem update는 거의 비슷 > 묶자!!


내일 할것
	캐스팅 없이 만들기
	mapper메서드를 사용하는 클래스를  추상 클래스 아니게 만들면서 추상 메서드 기능을 구현
	~ 스프링과 비슷하게  .
