테스트 프레임워크를 사용해볼것임

-환경 세팅
	maven-war-plugin 버전 낮춰 주고 
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>2.6</version>
        </plugin>

	.setting에서 xml 파일의 버전 맞춰 주고 
<?xml version="1.0" encoding="UTF-8"?>
<faceted-project>
  <fixed facet="wst.jsdt.web"/>
  <installed facet="java" version="1.8"/>
  <installed facet="wst.jsdt.web" version="1.0"/>
  <installed facet="jst.web" version="3.1"/>
</faceted-project>
	
	pom.xml에서 maven.compiler 버전을 java 버전과 맞춰주고
	
	dependency 설정. servlet, servler.jsp, ojdbc, junit

	src > main 아래에 java, resources, webapp이 되게 하고. 
	src 아래에 test 만들고 그 아래에 resources와 java 추가

-junit
	maven test 또는 junit test를 통해 태스트
		try catch 문을 사용해서 assert를 패쓰하면 에러를 잡아내지 못함 > (일반적으로)try catch를 하지 말것 

		maven에서 package하면 compile > test > package 순으로 진행 되기 때문에 test를 통과 해야만 가능
		>package 된 내용을 항상 test를 완료한 test를 포함하지 않는 내용만

	junit version
		ver.3은 엄격, 정해진 규칙만 사용해야 함
		ver.4는 pojo, 메서드명 클래스명 어노테이션을 강제하지 않음
		ver.5 test이 외의 것들을 사용하기 때문에 잘  사용 안함 

	
-제너릭
	인터페이스를 받고 이를 인자로 전달 받아서 사용

-가변 인자 ( ... )
	프론트엔드 언어에서 가변형 배열을 사용하는 것 처럼 ... 을 이용해서 가변 배열로 처리
	가변인자는 메서드 파라미터의 가장 나중에 와야 한다.
	core에서는 배열로 만들어서 처리
	하나만 올 수 있고 마지막에 들어 가야 한다.
	백엔드 언어의 체계를 위해 나중에 이야기 했음( 나중에 추가된 기능임)


===============================================
================스피링=========================
-plugin
	이클립스 마켓에서 spring 3.x로 받으면 spring frame 프로젝트를 위한 프로그램을 받을 수 있다.


-framework : work의 정형화 = 양식 (+ 보안)
	오픈소스로 진행되었기 때문에 3.x 중에 4.0.0을 시작했고 같이 개발 
	2.5가 기반이 되고 3.1에서 위기 > 4.x
	2.5 : xml을 통해서 환경 설정 -> 
	3.1 : 모바일(+a)의 등장 -> 어노테이션 , json 용이
	5.x : java 외의 언어까지 확장


meg = 